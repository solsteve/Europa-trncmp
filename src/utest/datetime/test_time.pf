module test_time
  use pfunit_mod
  use datetime_mod
  implicit none

  real(dp), parameter :: TOLL = 1.0d-12

contains

  @test
  !/ =====================================================================================
  subroutine test_time_setget
    !/ -----------------------------------------------------------------------------------
    type(TimeComponents) :: TC
    real(dp) :: fh1, fh2, fm1, fm2, fs1, fs2
    integer  :: ih1, ih2, im1, im2, is1, is2


    !/ -----------------------------------------------------------------------------------
    ih1=0
    im1=0
    fs1=D_ZERO
    call TC%clear
    call TC%get( H=ih2, M=im2, S=fs2 )
    @assertEqual( ih1, ih2 ) 
    @assertEqual( im1, im2 ) 
    @assertEqual( fs1, fs2 ) 

    !/ -----------------------------------------------------------------------------------

    fh1 = 2.0d0
    fm1 = 1.8d1
    fs1 = 3.5d1

    fh2 = toHours(   H=fh1, M=fm1, S=fs1 )
    fm2 = toMinutes( H=fh1, M=fm1, S=fs1 )
    fs2 = toSeconds( H=fh1, M=fm1, S=fs1 )

    @assertEqual( 2.3097222222222222d0, fh2 )
    !@assertEqual( 1.3858333333333334d2, fm2 )
    @assertEqual( 8.315d3,              fs2 )


  end subroutine test_time_setget


  @test
  !/ =====================================================================================
  subroutine test_time_tostring
    !/ -----------------------------------------------------------------------------------
    integer,  parameter :: hr(2) = [17,5]
    integer,  parameter :: mn(2) = [43,7]
    real(dp), parameter :: sc(2) = [12.331d0,9.391d0]
    integer,  parameter :: of(7) = [-1200,-700,-20,0,30,500,1100]

    character(:), allocatable :: verify

    character(17), parameter :: test(7,2,2,2) = reshape( [ &
         &  '17:43:12.331-1200',  &
         &  '17:43:12.331-0700',  &
         &  '17:43:12.331-0020',  &
         &  '     17:43:12.331',  &
         &  '17:43:12.331+0030',  &
         &  '17:43:12.331+0500',  &
         &  '17:43:12.331+1100',  &
         &  '17:43:09.391-1200',  &
         &  '17:43:09.391-0700',  &
         &  '17:43:09.391-0020',  &
         &  '     17:43:09.391',  &
         &  '17:43:09.391+0030',  &
         &  '17:43:09.391+0500',  &
         &  '17:43:09.391+1100',  &
         &  '17:07:12.331-1200',  &
         &  '17:07:12.331-0700',  &
         &  '17:07:12.331-0020',  &
         &  '     17:07:12.331',  &
         &  '17:07:12.331+0030',  &
         &  '17:07:12.331+0500',  &
         &  '17:07:12.331+1100',  &
         &  '17:07:09.391-1200',  &
         &  '17:07:09.391-0700',  &
         &  '17:07:09.391-0020',  &
         &  '     17:07:09.391',  &
         &  '17:07:09.391+0030',  &
         &  '17:07:09.391+0500',  &
         &  '17:07:09.391+1100',  &
         &  '05:43:12.331-1200',  &
         &  '05:43:12.331-0700',  &
         &  '05:43:12.331-0020',  &
         &  '     05:43:12.331',  &
         &  '05:43:12.331+0030',  &
         &  '05:43:12.331+0500',  &
         &  '05:43:12.331+1100',  &
         &  '05:43:09.391-1200',  &
         &  '05:43:09.391-0700',  &
         &  '05:43:09.391-0020',  &
         &  '     05:43:09.391',  &
         &  '05:43:09.391+0030',  &
         &  '05:43:09.391+0500',  &
         &  '05:43:09.391+1100',  &
         &  '05:07:12.331-1200',  &
         &  '05:07:12.331-0700',  &
         &  '05:07:12.331-0020',  &
         &  '     05:07:12.331',  &
         &  '05:07:12.331+0030',  &
         &  '05:07:12.331+0500',  &
         &  '05:07:12.331+1100',  &
         &  '05:07:09.391-1200',  &
         &  '05:07:09.391-0700',  &
         &  '05:07:09.391-0020',  &
         &  '     05:07:09.391',  &
         &  '05:07:09.391+0030',  &
         &  '05:07:09.391+0500',  &
         &  '05:07:09.391+1100' ], [7,2,2,2] )

    integer :: i, j, k, m

    type(TimeComponents) :: TC
    character(:), allocatable :: TS

    do i=1,2
       do j=1,2
          do k=1,2
             do m=1,7
                call TC%clear
                call TC%set( H=hr(i), M=mn(j), S=sc(k) )
                TS = TC%toString(OFFSET=of(m))
                verify = trim(adjustl(test(m,k,j,i)))
                @assertEqual( verify, TS )
             end do
          end do
       end do
    end do

  end subroutine test_time_tostring




end module test_time
