module testDequeInteger
  use pfunit_mod
  use deque_integer_class
  implicit none

  integer, parameter :: SAMPLES = 100

contains

  !/ -----------------------------------------------
  @test
  subroutine testDequeInteger_PP
    type(DequeInteger) :: Q
    integer            :: i, j, k, stat

    do i=1,SAMPLES
       call Q%push( i )
    end do

    @assertEqual( SAMPLES, Q%size() )
    @assertFalse( Q%empty() )

    k = 0
    do i=SAMPLES,1,-1
       j = Q%pop(stat)
       if ( 0.ne.stat ) k = k + 1
       if ( i.ne.j )    k = k + 1
    end do

    @assertEqual( 0, Q%size() )
    @assertEqual( 0, k )
    @assertTrue( Q%empty() )

  end subroutine testDequeInteger_PP


  !/ -----------------------------------------------
  @test
  subroutine testDequeInteger_AR
    type(DequeInteger) :: Q
    integer            :: i, j, k, stat

    do i=1,SAMPLES
       call Q%assert( i )
    end do

    @assertEqual( SAMPLES, Q%size() )
    @assertFalse( Q%empty() )

    k = 0
    do i=SAMPLES,1,-1
       j = Q%retract(stat)
       if ( 0.ne.stat ) k = k + 1
       if ( i.ne.j )    k = k + 1
    end do

    @assertEqual( 0, Q%size() )
    @assertEqual( 0, k )
    @assertTrue( Q%empty() )

  end subroutine testDequeInteger_AR


  !/ -----------------------------------------------
  @test
  subroutine testDequeInteger_AP
    type(DequeInteger) :: Q
    integer            :: i, j, k, stat

    do i=1,SAMPLES
       call Q%assert( i )
    end do

    @assertEqual( SAMPLES, Q%size() )
    @assertFalse( Q%empty() )

    k = 0
    do i=1,SAMPLES
       j = Q%pop(stat)
       if ( 0.ne.stat ) k = k + 1
       if ( i.ne.j )    k = k + 1
    end do

    @assertEqual( 0, Q%size() )
    @assertEqual( 0, k )
    @assertTrue( Q%empty() )

  end subroutine testDequeInteger_AP


  !/ -----------------------------------------------
  @test
  subroutine testDequeInteger_PR
    type(DequeInteger) :: Q
    integer            :: i, j, k, stat

    do i=1,SAMPLES
       call Q%push( i )
    end do

    @assertEqual( SAMPLES, Q%size() )
    @assertFalse( Q%empty() )

    k = 0
    do i=1,SAMPLES
       j = Q%retract(stat)
       if ( 0.ne.stat ) k = k + 1
       if ( i.ne.j )    k = k + 1
    end do

    @assertEqual( 0, Q%size() )
    @assertEqual( 0, k )
    @assertTrue( Q%empty() )

  end subroutine testDequeInteger_PR


  !/ -----------------------------------------------
  @test
  subroutine testDequeInteger_clear
    type(DequeInteger) :: Q
    integer            :: i

    do i=1,SAMPLES
       call Q%push( i )
    end do

    @assertEqual( SAMPLES, Q%size() )
    @assertFalse( Q%empty() )

    call Q%clear(del=.true.)

    @assertEqual( 0, Q%size() )
    @assertTrue( Q%empty() )

  end subroutine testDequeInteger_clear


  !/ -----------------------------------------------
  @test
  subroutine testDequeInteger_peek
    type(DequeInteger) :: Q
    integer            :: i, a, b, stat

    do i=1,SAMPLES
       call Q%assert( i )
    end do

    @assertEqual( SAMPLES, Q%size() )
    @assertFalse( Q%empty() )

    a = Q%peekHead( stat )
    @assertEqual( a, 1 )
    @assertEqual( 0, stat )

    b = Q%peekTail(stat)
    @assertEqual( b, SAMPLES )
    @assertEqual( 0, stat )

    call Q%clear(del=.true.)

    @assertEqual( 0, Q%size() )
    @assertTrue( Q%empty() )

    a = Q%peekHead( stat )
    @assertEqual( a, -1 )
    @assertEqual( 1, stat )

    b = Q%peekTail(stat)
    @assertEqual( b, -1 )
    @assertEqual( 1, stat )

  end subroutine testDequeInteger_peek


  !/ -----------------------------------------------
  @test
  subroutine testDequeInteger_convert
    integer           :: a, b, s
    class(*), pointer :: P
    character(32)     :: msg
    msg = ''
    a = 7

    P => integer2object( a )
    b = object2integer( P, s, msg )

    @assertEqual( a, b )

  end subroutine testDequeInteger_convert


  !/ -----------------------------------------------
  @test
  subroutine testDequeInteger_iterate_next
    type(DequeInteger) :: Q
    integer            :: i, j, k

    do i=1,SAMPLES
       call Q%push( i )
    end do

    call Q%head

    k = 0
    i = SAMPLES
    it_loop: do
        if ( Q%hasNext() ) then
          j = Q%next()
          if ( i.ne.j ) k = k + 1
       else
          exit it_loop
       end if
      i = i - 1
    end do it_loop
    
    @assertEqual( 0, k )

  end subroutine testDequeInteger_iterate_next

  
  !/ -----------------------------------------------
  @test
  subroutine testDequeInteger_iterate_prev
    type(DequeInteger) :: Q
    integer            :: i, j, k

    do i=1,SAMPLES
       call Q%push( i )
    end do

    call Q%tail

    k = 0
    i = 1
    it_loop: do
        if ( Q%hasPrev() ) then
          j = Q%prev()
          if ( i.ne.j ) k = k + 1
       else
          exit it_loop
       end if
      i = i + 1
    end do it_loop
    
    @assertEqual( 0, k )
    
  end subroutine testDequeInteger_iterate_prev

  @test
  subroutine testDequeInteger_repeat_add_rem
    type(DequeInteger) :: Q
    integer            :: i
    !/ -----------------------------------------------

    @assertEqual( 0, Q%size() )
    call Q%add(1)
    call Q%add(2)
    call Q%add(3)
    @assertEqual( 3, Q%size() )

    !/ -----------------------------------------------
    i = Q%remove()
    i = i + Q%remove()
    i = i + Q%remove()
    @assertEqual( 6, i )
    @assertTrue( Q%empty() )

    !/ -----------------------------------------------
    do i=1,3
       call Q%add(i)
    end do
    @assertEqual( 3, Q%size() )

    call Q%clear
    @assertTrue( Q%empty() )


  end subroutine testDequeInteger_repeat_add_rem

 
end module testDequeInteger
