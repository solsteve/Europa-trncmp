module testCompare
  use trncmp_env
  use pfunit_mod
  implicit none

contains

  !/ -----------------------------------------------
  @test
  subroutine compString
    integer                   :: r, stat
    character(:), allocatable :: a, b
    real(dp)                  :: d
    complex(dp)               :: z
    class(*), pointer         :: obj1, obj2

    a = 'Heasher'
    b = 'Heather'
    d = 3.7

    !/ -------------------------------
    obj1 => toObject( a )
    obj2 => toObject( b )
    r = compare( obj1, obj2, stat )  ! b < obj
    @assertTrue( r .lt. 0 )
    @assertEqual( 0, stat )

    !/ -------------------------------
    obj1 => toObject( a )
    obj2 => toObject( a )
    r = compare( obj1, obj2, stat )  ! b == obj
    @assertTrue( r .eq. 0 )
    @assertEqual( 0, stat )

    !/ -------------------------------
    obj1 => toObject( b )
    obj2 => toObject( a )
    r = compare( obj1, obj2, stat )  ! b > obj
    @assertTrue( r .gt. 0 )
    @assertEqual( 0, stat )

     !/ -------------------------------
    nullify(obj1)
    obj2 => toObject( a )
    r = compare( obj1, obj2, stat )  ! object 1 is NULL
    @assertEqual( 1, stat )

   !/ -------------------------------
    obj1 => toObject( a )
    nullify(obj2)
    r = compare( obj1, obj2, stat )  ! object 2 is NULL
    @assertEqual( 2, stat )

    !/ -------------------------------
    obj1 => toObject( a )
    obj2 => toObject( d )
    r = compare( obj1, obj2, stat )  ! object 2 is not a character string
    @assertEqual( 3, stat )

    !/ -------------------------------
    obj1 => toObject( d )
    obj2 => toObject( a )
    r = compare( obj1, obj2, stat )  ! object 1 is not a character string
    @assertEqual( 3, stat )

    !/ -------------------------------
    obj1 => toObject( z )
    obj2 => toObject( a )
    r = compare( obj1, obj2, stat )  ! object 1 is not valid type
    @assertEqual( 4, stat )

  end subroutine compString


  !/ -----------------------------------------------
  @test
  subroutine compInteger
    integer                   :: r, stat
    integer                   :: a, b
    real(dp)                  :: d
    complex(dp)               :: z
    class(*), pointer         :: obj1, obj2

    a = 1
    b = 7
    d = 3.7

    !/ -------------------------------
    obj1 => toObject( a )
    obj2 => toObject( b )
    r = compare( obj1, obj2, stat )  ! b < obj
    @assertTrue( r .lt. 0 )
    @assertEqual( 0, stat )

    !/ -------------------------------
    obj1 => toObject( a )
    obj2 => toObject( a )
    r = compare( obj1, obj2, stat )  ! b == obj
    @assertTrue( r .eq. 0 )
    @assertEqual( 0, stat )

    !/ -------------------------------
    obj1 => toObject( b )
    obj2 => toObject( a )
    r = compare( obj1, obj2, stat )  ! b > obj
    @assertTrue( r .gt. 0 )
    @assertEqual( 0, stat )

     !/ -------------------------------
    nullify(obj1)
    obj2 => toObject( a )
    r = compare( obj1, obj2, stat )  ! object 1 is NULL
    @assertEqual( 1, stat )

   !/ -------------------------------
    obj1 => toObject( a )
    nullify(obj2)
    r = compare( obj1, obj2, stat )  ! object 2 is NULL
    @assertEqual( 2, stat )

    !/ -------------------------------
    obj1 => toObject( a )
    obj2 => toObject( d )
    r = compare( obj1, obj2, stat )  ! object 2 is not an integer
    @assertEqual( 3, stat )

    !/ -------------------------------
    obj1 => toObject( d )
    obj2 => toObject( a )
    r = compare( obj1, obj2, stat )  ! object 1 is not an integer
    @assertEqual( 3, stat )

    !/ -------------------------------
    obj1 => toObject( z )
    obj2 => toObject( a )
    r = compare( obj1, obj2, stat )  ! object 1 is not valid type
    @assertEqual( 4, stat )

  end subroutine compInteger


  !/ -----------------------------------------------
  @test
  subroutine compSingle
    integer                   :: r, stat
    real(sp)                  :: a, b
    real(dp)                  :: d
    complex(dp)               :: z
    class(*), pointer         :: obj1, obj2

    a = 2.3_sp
    b = 7.1_sp
    d = 3.7

    !/ -------------------------------
    obj1 => toObject( a )
    obj2 => toObject( b )
    r = compare( obj1, obj2, stat )  ! b < obj
    @assertTrue( r .lt. 0 )
    @assertEqual( 0, stat )

    !/ -------------------------------
    obj1 => toObject( a )
    obj2 => toObject( a )
    r = compare( obj1, obj2, stat )  ! b == obj
    @assertTrue( r .eq. 0 )
    @assertEqual( 0, stat )

    !/ -------------------------------
    obj1 => toObject( b )
    obj2 => toObject( a )
    r = compare( obj1, obj2, stat )  ! b > obj
    @assertTrue( r .gt. 0 )
    @assertEqual( 0, stat )

     !/ -------------------------------
    nullify(obj1)
    obj2 => toObject( a )
    r = compare( obj1, obj2, stat )  ! object 1 is NULL
    @assertEqual( 1, stat )

   !/ -------------------------------
    obj1 => toObject( a )
    nullify(obj2)
    r = compare( obj1, obj2, stat )  ! object 2 is NULL
    @assertEqual( 2, stat )

    !/ -------------------------------
    obj1 => toObject( a )
    obj2 => toObject( d )
    r = compare( obj1, obj2, stat )  ! object 2 is not a single precision
    @assertEqual( 3, stat )

    !/ -------------------------------
    obj1 => toObject( d )
    obj2 => toObject( a )
    r = compare( obj1, obj2, stat )  ! object 1 is not a single precision
    @assertEqual( 3, stat )

    !/ -------------------------------
    obj1 => toObject( z )
    obj2 => toObject( a )
    r = compare( obj1, obj2, stat )  ! object 1 is not valid type
    @assertEqual( 4, stat )

  end subroutine compSingle


  !/ -----------------------------------------------
  @test
  subroutine compDouble
    integer                   :: r, stat
    real(dp)                  :: a, b
    integer                   :: d
    complex(dp)               :: z
    class(*), pointer         :: obj1, obj2

    a = 2.3_dp
    b = 7.1_dp
    d = 3

    !/ -------------------------------
    obj1 => toObject( a )
    obj2 => toObject( b )
    r = compare( obj1, obj2, stat )  ! b < obj
    @assertTrue( r .lt. 0 )
    @assertEqual( 0, stat )

    !/ -------------------------------
    obj1 => toObject( a )
    obj2 => toObject( a )
    r = compare( obj1, obj2, stat )  ! b == obj
    @assertTrue( r .eq. 0 )
    @assertEqual( 0, stat )

    !/ -------------------------------
    obj1 => toObject( b )
    obj2 => toObject( a )
    r = compare( obj1, obj2, stat )  ! b > obj
    @assertTrue( r .gt. 0 )
    @assertEqual( 0, stat )

     !/ -------------------------------
    nullify(obj1)
    obj2 => toObject( a )
    r = compare( obj1, obj2, stat )  ! object 1 is NULL
    @assertEqual( 1, stat )

   !/ -------------------------------
    obj1 => toObject( a )
    nullify(obj2)
    r = compare( obj1, obj2, stat )  ! object 2 is NULL
    @assertEqual( 2, stat )

    !/ -------------------------------
    obj1 => toObject( a )
    obj2 => toObject( d )
    r = compare( obj1, obj2, stat )  ! object 2 is not a double precision
    @assertEqual( 3, stat )

    !/ -------------------------------
    obj1 => toObject( d )
    obj2 => toObject( a )
    r = compare( obj1, obj2, stat )  ! object 1 is not a double precision
    @assertEqual( 3, stat )

    !/ -------------------------------
    obj1 => toObject( z )
    obj2 => toObject( a )
    r = compare( obj1, obj2, stat )  ! object 1 is not valid type
    @assertEqual( 4, stat )

  end subroutine compDouble





  !/ -----------------------------------------------
  @test
  subroutine testZero
    real(sp) :: small4
    real(dp) :: small8

    small4 = epsilon(1.0_sp) / 2.0_sp
    small8 = epsilon(1.0_dp) / 2.0_dp

    @assertTrue( isZero( small4 ) )
    @assertTrue( isZero( small8 ) )

    @assertFalse( isZero( -1.0_sp ) )
    @assertFalse( isZero(  1.0_sp ) )
    @assertFalse( isZero( -1.0_dp ) )
    @assertFalse( isZero(  1.0_dp ) )

    @assertTrue( isZero( -1.0_sp, tol = 2.0_sp ) )
    @assertTrue( isZero(  1.0_sp, tol = 2.0_sp ) )
    @assertTrue( isZero( -1.0_dp, tol = 2.0_dp ) )
    @assertTrue( isZero(  1.0_dp, tol = 2.0_dp ) )

  end subroutine testZero

  
  !/ -----------------------------------------------
  @test
  subroutine testEquals
    real(sp) :: small4, a4, b4
    real(dp) :: small8, a8, b8

    small4 = epsilon(1.0_sp) / 2.0_sp
    small8 = epsilon(1.0_dp) / 2.0_dp

    a4 = 3.5e-2
    b4 = a4 + small4

    a8 = 2.1d3
    b8 = a8 + small8

    @assertTrue( isEqual( a4, b4 ) )
    @assertTrue( isEqual( a8, b8 ) )
    @assertTrue( isEqual( b4, a4 ) )
    @assertTrue( isEqual( b8, a8 ) )

    b4 = a4 + 1.0_sp
    b8 = a8 + 1.0_dp

    @assertFalse( isEqual( a4, b4 ) )
    @assertFalse( isEqual( a8, b8 ) )
    @assertFalse( isEqual( b4, a4 ) )
    @assertFalse( isEqual( b8, a8 ) )
    
    @assertTrue( isEqual( a4, b4, tol = 2.0_sp ) )
    @assertTrue( isEqual( a8, b8, tol = 2.0_dp ) )
    @assertTrue( isEqual( b4, a4, tol = 2.0_sp ) )
    @assertTrue( isEqual( b8, a8, tol = 2.0_dp ) )
   
  end subroutine testEquals

  
end module testCompare
