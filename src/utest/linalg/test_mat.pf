module test_mat
  use pfunit_mod
  use matrix_mod
  use dice_mod

  integer, parameter :: nc_p(2) = [ 37, 21 ]
  integer, parameter :: nr_p(2) = [ MIN_M_PAR/2, 2*MIN_M_PAR ]


contains



  !/ =====================================================================================
  subroutine showit( i, s )
    !/ -----------------------------------------------------------------------------------
    implicit none
    integer,      intent(in) :: i
    character(*), intent(in) :: s
    !/ -----------------------------------------------------------------------------------
    if ( 1.eq.i ) then
       write( *, 10 ) s
    else
       write( *, 20 ) s
    end if
10  format( 'Vectorize ',A )
20  format( 'OpenMP    ',A )
  end subroutine showit


  !/ =====================================================================================
  pure function fill_A( i, j ) result( x )
    !/ -----------------------------------------------------------------------------------
    implicit none
    integer, intent(in) :: i
    integer, intent(in) :: j
    real(dp)            :: x
    !/ -----------------------------------------------------------------------------------
    x = sin(real(2*i+3*j-i*j,dp))*1.0d-1
  end function fill_A

  !/ =====================================================================================
  pure function fill_B( i, j ) result( x )
    !/ -----------------------------------------------------------------------------------
    implicit none
    integer, intent(in) :: i
    integer, intent(in) :: j
    real(dp)            :: x
    !/ -----------------------------------------------------------------------------------
    x = cos(real(3*i-2*j+4*i*j,dp))*1.0d-1
  end function fill_B




  @test
  !/ =====================================================================================
  subroutine test_matrix_add
    !/ -----------------------------------------------------------------------------------
    implicit none

    integer :: r, c, k, nr, nc
    real(dp), allocatable :: tml(:,:), tmr(:,:), tmm(:,:), tms(:,:), tsm(:,:)
    real(dp), allocatable :: fmm(:,:), fms(:,:), fsm(:,:)
    real(dp) :: sl, sr, a, b

    sl = 3.7d0
    sr = 2.9d0

    do k=1,2
       call showit(k,'Add')
       nr = nr_p(k)
       nc = nc_p(k)

       allocate( tml(nr,nc) )
       allocate( tmr(nr,nc) )
       allocate( tmm(nr,nc) )
       allocate( tms(nr,nc) )
       allocate( tsm(nr,nc) )
       allocate( fmm(nr,nc) )
       allocate( fms(nr,nc) )
       allocate( fsm(nr,nc) )

       do r=1,nr
          do c=1,nc
             a = fill_A(r,c)
             b = fill_B(r,c)
             tml(r,c) = a
             tmr(r,c) = b
             tmm(r,c) = a  + b
             tms(r,c) = a  + sr
             tsm(r,c) = sl + b
          end do
       end do

       call add( fmm, tml, tmr )  !  m = m + m
       call add( fms, tml, sr  )  !  m = m + s
       call add( fsm, sl,  tmr )  !  m = s + m

       @assertEqual( tmm, fmm )
       @assertEqual( tms, fms )
       @assertEqual( tsm, fsm )

       call copy( fmm, tml )
       call copy( fms, tml )
       call add(  fmm, tmr )  !  m += m
       call add(  fms, sr  )  !  m += m

       @assertEqual( tmm, fmm )
       @assertEqual( tms, fms )

       deallocate( tml )
       deallocate( tmr )
       deallocate( tmm )
       deallocate( tms )
       deallocate( tsm )
       deallocate( fmm )
       deallocate( fms )
       deallocate( fsm )

    end do

  end subroutine test_matrix_add




  @test
  !/ =====================================================================================
  subroutine test_matrix_sub
    !/ -----------------------------------------------------------------------------------
    implicit none

    integer :: r, c, k, nr, nc
    real(dp), allocatable :: tml(:,:), tmr(:,:), tmm(:,:), tms(:,:), tsm(:,:)
    real(dp), allocatable :: fmm(:,:), fms(:,:), fsm(:,:)
    real(dp) :: sl, sr, a, b

    sl = 3.7d0
    sr = 2.9d0

    do k=1,2
       call showit(k,'Sub')
       nr = nr_p(k)
       nc = nc_p(k)

       allocate( tml(nr,nc) )
       allocate( tmr(nr,nc) )
       allocate( tmm(nr,nc) )
       allocate( tms(nr,nc) )
       allocate( tsm(nr,nc) )
       allocate( fmm(nr,nc) )
       allocate( fms(nr,nc) )
       allocate( fsm(nr,nc) )

       do r=1,nr
          do c=1,nc
             a = fill_A(r,c)
             b = fill_B(r,c)
             tml(r,c) = a
             tmr(r,c) = b
             tmm(r,c) = a  - b
             tms(r,c) = a  - sr
             tsm(r,c) = sl - b
          end do
       end do

       call sub( fmm, tml, tmr )  !  m = m - m
       call sub( fms, tml, sr  )  !  m = m - s
       call sub( fsm, sl,  tmr )  !  m = s - m

       @assertEqual( tmm, fmm )
       @assertEqual( tms, fms )
       @assertEqual( tsm, fsm )

       call copy( fmm, tml )
       call copy( fms, tml )
       call sub(  fmm, tmr )  !  m -= m
       call sub(  fms, sr  )  !  m -= m

       @assertEqual( tmm, fmm )
       @assertEqual( tms, fms )

       deallocate( tml )
       deallocate( tmr )
       deallocate( tmm )
       deallocate( tms )
       deallocate( tsm )
       deallocate( fmm )
       deallocate( fms )
       deallocate( fsm )

    end do

  end subroutine test_matrix_sub




  @test
  !/ =====================================================================================
  subroutine test_matrix_mul
    !/ -----------------------------------------------------------------------------------
    implicit none

    integer :: r, c, k, nr, nc
    real(dp), allocatable :: tml(:,:), tmr(:,:), tmm(:,:), tms(:,:), tsm(:,:)
    real(dp), allocatable :: fmm(:,:), fms(:,:), fsm(:,:)
    real(dp) :: sl, sr, a, b

    sl = 3.7d0
    sr = 2.9d0

    do k=1,2
       call showit(k,'Mul')
       nr = nr_p(k)
       nc = nc_p(k)

       allocate( tml(nr,nc) )
       allocate( tmr(nr,nc) )
       allocate( tmm(nr,nc) )
       allocate( tms(nr,nc) )
       allocate( tsm(nr,nc) )
       allocate( fmm(nr,nc) )
       allocate( fms(nr,nc) )
       allocate( fsm(nr,nc) )

       do r=1,nr
          do c=1,nc
             a = fill_A(r,c)
             b = fill_B(r,c)
             tml(r,c) = a
             tmr(r,c) = b
             tmm(r,c) = a  * b
             tms(r,c) = a  * sr
             tsm(r,c) = sl * b
          end do
       end do

       call mul( fmm, tml, tmr )  !  m = m * m
       call mul( fms, tml, sr  )  !  m = m * s
       call mul( fsm, sl,  tmr )  !  m = s * m

       @assertEqual( tmm, fmm )
       @assertEqual( tms, fms )
       @assertEqual( tsm, fsm )

       call copy( fmm, tml )
       call copy( fms, tml )
       call mul(  fmm, tmr )  !  m *= m
       call mul(  fms, sr  )  !  m *= m

       @assertEqual( tmm, fmm )
       @assertEqual( tms, fms )

       deallocate( tml )
       deallocate( tmr )
       deallocate( tmm )
       deallocate( tms )
       deallocate( tsm )
       deallocate( fmm )
       deallocate( fms )
       deallocate( fsm )

    end do

  end subroutine test_matrix_mul







  @test
  !/ =====================================================================================
  subroutine test_matrix_div
    !/ -----------------------------------------------------------------------------------
    implicit none

    integer :: r, c, k, nr, nc
    real(dp), allocatable :: tml(:,:), tmr(:,:), tmm(:,:), tms(:,:), tsm(:,:)
    real(dp), allocatable :: fmm(:,:), fms(:,:), fsm(:,:)
    real(dp) :: sl, sr, a, b

    sl = 3.7d0
    sr = 2.9d0

    do k=1,2
       call showit(k,'Div')
       nr = nr_p(k)
       nc = nc_p(k)

       allocate( tml(nr,nc) )
       allocate( tmr(nr,nc) )
       allocate( tmm(nr,nc) )
       allocate( tms(nr,nc) )
       allocate( tsm(nr,nc) )
       allocate( fmm(nr,nc) )
       allocate( fms(nr,nc) )
       allocate( fsm(nr,nc) )

       do r=1,nr
          do c=1,nc
             a = fill_A(r,c)
             b = fill_B(r,c)
             tml(r,c) = a
             tmr(r,c) = b
             tmm(r,c) = a  / b
             tms(r,c) = a  / sr
             tsm(r,c) = sl / b
          end do
       end do

       call div( fmm, tml, tmr )  !  m = m / m
       call div( fms, tml, sr  )  !  m = m / s
       call div( fsm, sl,  tmr )  !  m = s / m

       @assertEqual( tmm, fmm, 1.0d-10 )
       @assertEqual( tms, fms, 1.0d-10 )
       @assertEqual( tsm, fsm, 1.0d-10 )

       call copy( fmm, tml )
       call copy( fms, tml )
       call div(  fmm, tmr )  !  m /= m
       call div(  fms, sr  )  !  m /= m

       @assertEqual( tmm, fmm, 1.0d-10 )
       @assertEqual( tms, fms, 1.0d-10 )

       deallocate( tml )
       deallocate( tmr )
       deallocate( tmm )
       deallocate( tms )
       deallocate( tsm )
       deallocate( fmm )
       deallocate( fms )
       deallocate( fsm )

    end do

  end subroutine test_matrix_div



  @test
  !/ =====================================================================================
  subroutine test_matrix_swap
    !/ -----------------------------------------------------------------------------------
    implicit none

    real(dp), allocatable :: M1(:,:), M2(:,:), A1(:,:), A2(:,:)
    real(dp) :: x1, x2
    integer  :: r, c, k, nr, nc

    do k=1,2
       nr = nr_p(k)
       nc = nc_p(k)
       call showit( k, 'Swap' )

       allocate( M1(nr,nc) )
       allocate( M2(nr,nc) )
       allocate( A1(nr,nc) )
       allocate( A2(nr,nc) )

       do concurrent(r=1:nr,c=1:nc)
          x1 = fill_A( r, c )
          x2 = fill_B( r, c )
          M1(r,c) = x1
          A1(r,c) = x1
          M2(r,c) = x2
          A2(r,c) = x2
       end do

       @assertEqual( M1, A1 )
       @assertEqual( M2, A2 )

       call swap( A1, A2 )

       @assertEqual( M1, A2 )
       @assertEqual( M2, A1 )

       deallocate( M1 )
       deallocate( M2 )
       deallocate( A1 )
       deallocate( A2 )
    end do

  end subroutine test_matrix_swap







  @test
  !/ =====================================================================================
  subroutine test_matrix_dot
    !/ -----------------------------------------------------------------------------------
    implicit none

    real(dp), parameter :: DTEST_ML(3,5) = reshape([  &
         &   9.1d0, -3.8d0, -8.3d0,  &
         &   2.9d0, -6.6d0, -1.2d0,  &
         &   5.2d0, -4.4d0,  1.6d0,  &
         &  -1.2d0,  7.7d0,  2.3d0,  &
         &   2.6d0,  1.5d0, -5.1d0  &
         &  ],[3,5])

    real(dp), parameter :: DTEST_MR(5,4) = reshape([  &
         &  -5.7d0,  4.5d0,  8.3d0,  5.6d0,  5.8d0,    &
         &   4.7d0, -7.5d0,  3.4d0,  4.3d0, -2.7d0,    &
         &   6.7d0,  9.8d0,  2.4d0, -1.5d0,  7.8d0,    &
         &  -2.4d0,  1.8d0, -6.9d0,  2.1d0,  4.2d0     &
         &  ],[5,4])

    real(dp), parameter :: DTEST_VL(5) = [  2.6d0, -5.1d0,  4.9d0,  3.3d0,  1.2d0 ]

    real(dp), parameter :: DTEST_VR(5) = [  7.3d0, -3.6d0,  5.3d0, -8.1d0,  2.9d0 ]

    real(dp), parameter :: TEST_MM(3,4) = reshape([  &
         &    12.70d0,    7.26d0,   38.49d0,  &
         &    26.52d0,   45.74d0,   -0.91d0,  &
         &   123.95d0, -100.55d0, -106.76d0,  &
         &   -44.10d0,   50.07d0,   -9.87d0   &
         &  ],[3,4])

    real(dp), parameter :: TEST_MV(3) = [  100.81d0,  -85.32d0,  -81.21d0 ]

    real(dp), parameter :: TEST_VM(4) = [   28.34d0,   78.08d0,  -16.39d0,  -37.26d0 ]

    real(dp), allocatable :: c1(:,:), c2(:), c3(:)

    allocate( c1(3,4) )
    allocate( c2(3) )
    allocate( c3(4) )

    call dot( c1, DTEST_ML, DTEST_MR )
    call dot( c2, DTEST_ML, DTEST_VR )
    call dot( c3, DTEST_VL, DTEST_MR )

    @assertEqual( TEST_MM, c1, 1.0d-12 )
    @assertEqual( TEST_MV, c2, 1.0d-12 )
    @assertEqual( TEST_VM, c3, 1.0d-12 )

    deallocate( c1 )
    deallocate( c2 )
    deallocate( c3 )

  end subroutine test_matrix_dot


  @test
  !/ =====================================================================================
  subroutine test_matrix_det2
    !/ -----------------------------------------------------------------------------------
    implicit none

    real(dp), parameter :: M2(2,2) = reshape( [7.0d0, 8.0d0, -3.0d0, 1.0d0], [2,2] )

    real(dp) :: d2

    d2 = det(M2)

    @assertEqual( 3.1d1, d2 )

  end subroutine test_matrix_det2

  @test
  !/ =====================================================================================
  subroutine test_matrix_det3
    !/ -----------------------------------------------------------------------------------
    implicit none

    real(dp), parameter :: M3(3,3) = reshape([  &
         &      7.0d0, 8.0d0, 1.0d0,  &
         &     -3.0d0, 1.0d0, 6.0d0,  &
         &     11.0d0, -5.0d0, 4.0d0  &
         &], [3,3] )

    real(dp) :: d3

    d3 = det(M3)

    @assertEqual( 8.66d2, d3 )

  end subroutine test_matrix_det3

  @test
  !/ =====================================================================================
  subroutine test_matrix_det4
    !/ -----------------------------------------------------------------------------------
    implicit none

    real(dp), parameter :: M4(4,4) = reshape([  &
         &    -7.4d0,  8.3d0, -1.2d0,  3.1d0,   &
         &     6.5d0, -2.5d0,  4.1d0, -3.2d0,   &
         &    -6.1d0,  8.3d0, -8.9d0,  3.6d0,   &
         &     3.5d0, -9.5d0,  2.4d0, -7.2d0    &
         &], [4,4] )

    real(dp) :: d4

    d4 = det(M4)

    @assertEqual( -1.7435446d3, d4 )

  end subroutine test_matrix_det4


  @test
  !/ =====================================================================================
  subroutine test_matrix_inv2
    !/ -----------------------------------------------------------------------------------
    implicit none

    real(dp), parameter :: A(2,2) = reshape( [7.0d0, 8.0d0, -3.0d0, 1.0d0], [2,2] )

    real(dp) :: B(2,2), C1(2,2), C2(2,2)
    real(dp) :: dt

    integer :: i, j

    call inverse_2_R8( B, A, D=dt )

    @assertEqual( 3.1d1, dt )

    call dot( C1, A, B )
    call dot( C2, B, A )

    do i=1,2
       do j=1,2
          if ( i.eq.j ) then
             @assertEqual( 1.0d0, C1(i,j), 1.0d-12 )
             @assertEqual( 1.0d0, C2(i,j), 1.0d-12 )
          else
             @assertEqual( 0.0d0, C1(i,j), 1.0d-12 )
             @assertEqual( 0.0d0, C2(i,j), 1.0d-12 )
          end if
       end do
    end do

  end subroutine test_matrix_inv2



  @test
  !/ =====================================================================================
  subroutine test_matrix_inv3
    !/ -----------------------------------------------------------------------------------
    implicit none

    real(dp), parameter :: A(3,3) = reshape( [ &
         &      7.0d0, 8.0d0, 1.0d0,  &
         &     -3.0d0, 1.0d0, 6.0d0,  &
         &     11.0d0, -5.0d0, 4.0d0  &
         &  ], [3,3] )

    real(dp) :: B(3,3), C1(3,3), C2(3,3)
    real(dp) :: dt

    integer :: i, j

    call inverse_3_R8( B, A, D=dt )

    @assertEqual( 8.66d2, dt )

    call dot( C1, A, B )
    call dot( C2, B, A )

    do i=1,3
       do j=1,3
          if ( i.eq.j ) then
             @assertEqual( 1.0d0, C1(i,j), 1.0d-12 )
             @assertEqual( 1.0d0, C2(i,j), 1.0d-12 )
          else
             @assertEqual( 0.0d0, C1(i,j), 1.0d-12 )
             @assertEqual( 0.0d0, C2(i,j), 1.0d-12 )
          end if
       end do
    end do

  end subroutine test_matrix_inv3





  @test
  !/ =====================================================================================
  subroutine test_matrix_inv4
    !/ -----------------------------------------------------------------------------------
    implicit none

    real(dp), parameter :: A(4,4) = reshape( [ &
         &    -7.4d0,  8.3d0, -1.2d0,  3.1d0,   &
         &     6.5d0, -2.5d0,  4.1d0, -3.2d0,   &
         &    -6.1d0,  8.3d0, -8.9d0,  3.6d0,   &
         &     3.5d0, -9.5d0,  2.4d0, -7.2d0    &
         &  ], [4,4] )

    real(dp) :: B(4,4), C1(4,4), C2(4,4)
    real(dp) :: dt

    integer :: i, j

    call inverse_4_R8( B, A, D=dt )

    @assertEqual( -1.7435446d3, dt )

    call dot( C1, A, B )
    call dot( C2, B, A )

    do i=1,4
       do j=1,4
          if ( i.eq.j ) then
             @assertEqual( 1.0d0, C1(i,j), 1.0d-12 )
             @assertEqual( 1.0d0, C2(i,j), 1.0d-12 )
          else
             @assertEqual( 0.0d0, C1(i,j), 1.0d-12 )
             @assertEqual( 0.0d0, C2(i,j), 1.0d-12 )
          end if
       end do
    end do

  end subroutine test_matrix_inv4


  @test
  !/ =====================================================================================
  subroutine test_matrix_invN
    !/ -----------------------------------------------------------------------------------
    implicit none

    integer, parameter :: NN = 6

    real(dp), parameter :: A(6,6) = reshape([     &
         &   1.22d+00,  1.68d+00,  4.80d-01, -3.40d+00, -4.31d+00, -5.00d-02,  &
         &  -3.31d+00, -8.80d-01,  3.00d-02, -3.44d+00,  7.70d-01,  2.99d+00,  &
         &   4.40d-01,  5.00d-02, -8.90d-01,  1.63d+00, -2.28d+00,  1.56d+00,  &
         &  -1.00d-01,  4.60d-01,  2.22d+00, -5.64d+00, -5.10d-01,  5.27d+00,  &
         &  -2.26d+00,  4.40d-01, -3.30d-01, -4.00d-01, -1.98d+00,  1.76d+00,  &
         &   1.29d+00, -1.80d-01,  9.70d-01, -1.45d+00,  3.66d+00,  2.74d+00  &
         &  ],[6,6])

    real(dp), parameter :: TEST_DT = -513.533820663072d0

    real(dp) :: B(NN,NN), C1(NN,NN), C2(NN,NN)
    real(dp) :: dt

    integer :: i, j

    call inverse( B, A, D=dt )

    !@assertEqual( TEST_DT, dt )

    call dot( C1, A, B )
    call dot( C2, B, A )

    do i=1,NN
       do j=1,NN
          if ( i.eq.j ) then
             @assertEqual( 1.0d0, C1(i,j), 1.0d-12 )
             @assertEqual( 1.0d0, C2(i,j), 1.0d-12 )
          else
             @assertEqual( 0.0d0, C1(i,j), 1.0d-12 )
             @assertEqual( 0.0d0, C2(i,j), 1.0d-12 )
          end if
       end do
    end do

  end subroutine test_matrix_invN


  !/ =====================================================================================
  function dfunc( i ) result( x )
    !/ -----------------------------------------------------------------------------------
    implicit none
    integer, intent(in) :: i
    real(dp)            :: x
    !/ -----------------------------------------------------------------------------------
    x = sin( real( i, dp ) )
  end function dfunc


  !/ =====================================================================================
  function mfunc( i, j ) result( x )
    !/ -----------------------------------------------------------------------------------
    implicit none
    integer, intent(in) :: i
    integer, intent(in) :: j
    real(dp)            :: x
    !/ -----------------------------------------------------------------------------------
    x = log( real( i, dp ) * exp( real( j, dp ) ) )
  end function mfunc


  @test
  !/ =====================================================================================
  subroutine test_matrix_diagmul_small
    !/ -----------------------------------------------------------------------------------
    implicit none

    integer, parameter :: n = 5

    real(dp) :: x, C1(n,n), C2(n,n), V(n), D(n,n), M(n,n)
    integer :: i, j

    do i=1,n
       V(i) = dfunc(i)
       do j=1,n
          if ( i.eq.j ) then
             D(i,j) = V(i)
          else
             D(i,j) = D_ZERO
          end if
          M(i,j) = mfunc(i,j)
       end do
    end do

    call dot( C1, D, M )
    call diagmul( C2, V, M )

    do i=1,n
       do j=1,n
          x = dfunc(i)*mfunc(i,j)
          @assertEqual( x, C1(i,j) )
          @assertEqual( x, C2(i,j) )
       end do
    end do

  end subroutine test_matrix_diagmul_small

  @test
  !/ =====================================================================================
  subroutine test_matrix_diagmul_big
    !/ -----------------------------------------------------------------------------------
    implicit none

    integer, parameter :: n = 100

    real(dp) :: x, C1(n,n), C2(n,n), V(n), D(n,n), M(n,n)
    integer :: i, j

    do i=1,n
       V(i) = dfunc(i)
       do j=1,n
          if ( i.eq.j ) then
             D(i,j) = V(i)
          else
             D(i,j) = D_ZERO
          end if
          M(i,j) = mfunc(i,j)
       end do
    end do

    call dot( C1, D, M )
    call diagmul( C2, V, M )

    do i=1,n
       do j=1,n
          x = dfunc(i)*mfunc(i,j)
          @assertEqual( x, C1(i,j), 1.0d-12 )
          @assertEqual( x, C2(i,j), 1.0d-12 )
       end do
    end do

  end subroutine test_matrix_diagmul_big




  @test
  !/ =====================================================================================
  subroutine test_mean_shift_vector
    !/ -----------------------------------------------------------------------------------
    implicit none

    integer,  parameter :: NN      = 100000
    real(dp), parameter :: true_mu = 0.0d0

    type(Dice) :: dd

    real(dp) :: mu1, mu2, S1, S2, d
    integer  :: i

    real(dp), allocatable :: X(:), Xs(:), Xr(:)

    allocate( X(NN) )
    allocate( Xs(NN) )
    allocate( Xr(NN) )

    do i=1,NN
       X(i)  = dd%normal()
       Xs(i) = X(i) + true_mu
    end do

    call MeanShift( Xr, Xs, MEAN=mu1 )
    call MeanShift(     Xs, MEAN=mu2 )

    S1 = D_ZERO
    S2 = D_ZERO
    do i=1,NN
       d = X(i) - Xs(i)
       S1 = S1 + (d*d)
       d = X(i) - Xr(i)
       S2 = S2 + (d*d)
    end do

    S1 = S1 / real(NN,dp)
    S2 = S2 / real(NN,dp)

    @assertEqual( true_mu, mu1, 0.1d1 )
    @assertEqual( mu1, mu2 )
    @assertEqual( S1, S2 )


    deallocate( X )
    deallocate( Xs )
    deallocate( Xr )



  end subroutine test_mean_shift_vector

  @test
  !/ =====================================================================================
  subroutine test_mean_shift_matrix_col
    !/ -----------------------------------------------------------------------------------
    implicit none

    integer,  parameter :: NR = 10000
    integer,  parameter :: NC = 3
    real(dp), parameter :: true_mu(3) = [ 3.0d0, -11.0d0, 7.0d0 ]

    type(Dice) :: dd

    integer  :: i, j

    real(dp), allocatable :: X(:,:), Xs(:,:), Xr(:,:), mu1(:), mu2(:)
    real(dp) :: d, S1, S2

    allocate( X(NR,NC) )
    allocate( Xs(NR,NC) )
    allocate( Xr(NR,NC) )
    allocate( mu1(NC) )
    allocate( mu2(NC) )

    do j=1,NC
       do i=1,NR
          X(i,j)  = dd%normal()
          Xs(i,j) = X(i,j) + true_mu(j)
       end do
    end do

    call MeanShift( Xr, Xs, MEAN=mu1 )
    call MeanShift(     Xs, MEAN=mu2 )

    S1 = D_ZERO
    S2 = D_ZERO
    do j=1,NC
       do i=1,NR
          d = X(i,j) - Xs(i,j)
          S1 = S1 + (d*d)
          d = X(i,j) - Xr(i,j)
          S2 = S2 + (d*d)
       end do
    end do

    S1 = S1 / real(NR*NC,dp)
    S2 = S2 / real(NR*NC,dp)

    @assertEqual( true_mu, mu1, 0.1d1 )
    @assertEqual( mu1, mu2 )
    @assertEqual( S1, S2 )

   deallocate( X )
    deallocate( Xs )
    deallocate( Xr )
    deallocate( mu1 )
    deallocate( mu2 )

  end subroutine test_mean_shift_matrix_col

  @test
  !/ =====================================================================================
  subroutine test_mean_shift_matrix_row
    !/ -----------------------------------------------------------------------------------
    implicit none

    integer,  parameter :: NR = 3
    integer,  parameter :: NC = 10000
    real(dp), parameter :: true_mu(3) = [ 3.0d0, -11.0d0, 7.0d0 ]

    type(Dice) :: dd

    integer  :: i, j

    real(dp), allocatable :: X(:,:), Xs(:,:), Xr(:,:), mu1(:), mu2(:)
    real(dp) :: d, S1, S2

    allocate( X(NR,NC) )
    allocate( Xs(NR,NC) )
    allocate( Xr(NR,NC) )
    allocate( mu1(NR) )
    allocate( mu2(NR) )

    do i=1,NR
       do j=1,NC
          X(i,j)  = dd%normal()
          Xs(i,j) = X(i,j) + true_mu(i)
       end do
    end do

    call MeanShift( Xr, Xs, MEAN=mu1 )
    call MeanShift(     Xs, MEAN=mu2 )

    S1 = D_ZERO
    S2 = D_ZERO
    do i=1,NR
       do j=1,NC
          d = X(i,j) - Xs(i,j)
          S1 = S1 + (d*d)
          d = X(i,j) - Xr(i,j)
          S2 = S2 + (d*d)
       end do
    end do

    S1 = S1 / real(NR*NC,dp)
    S2 = S2 / real(NR*NC,dp)

    @assertEqual( true_mu, mu1, 0.1d1 )
    @assertEqual( mu1, mu2 )
    @assertEqual( S1, S2 )

    deallocate( X )
    deallocate( Xs )
    deallocate( Xr )
    deallocate( mu1 )
    deallocate( mu2 )

  end subroutine test_mean_shift_matrix_row



  @test
  subroutine test_mat_ATA_INNER
    implicit none
    integer, parameter :: NR = 10
    integer, parameter :: NC = 3

    real(dp), allocatable :: A(:,:), AT(:,:), C1(:,:), C2(:,:)
    real(dp) :: x
    integer :: r,c

    allocate( A(NR,NC) )
    allocate( AT(NC,NR) )
    allocate( C1(NC,NC) )
    allocate( C2(NC,NC) )

    do r=1,NR
       do c=1,NC
          x = fill_A(r,c)
          A(r,c)  = x
          AT(c,r) = x
       end do
    end do

    call dot( C1, AT, A )
    call ATA( C2, A )

    @assertEqual( C1, C2 )

    deallocate( A )
    deallocate( AT )
    deallocate( C1 )
    deallocate( C2 )

  end subroutine test_mat_ATA_INNER

  
  @test
  subroutine test_mat_ATA_OUTER
    implicit none
    integer, parameter :: NR = 3
    integer, parameter :: NC = 10

    real(dp), allocatable :: A(:,:), AT(:,:), C1(:,:), C2(:,:)
    real(dp) :: x
    integer :: r,c

    allocate( A(NR,NC) )
    allocate( AT(NC,NR) )
    allocate( C1(NC,NC) )
    allocate( C2(NC,NC) )

    do r=1,NR
       do c=1,NC
          x = fill_B(r,c)
          A(r,c)  = x
          AT(c,r) = x
       end do
    end do

    call dot( C1, AT, A )
    call ATA( C2, A )

    @assertEqual( C1, C2, 1.0d-15 )

    deallocate( A )
    deallocate( AT )
    deallocate( C1 )
    deallocate( C2 )

  end subroutine test_mat_ATA_OUTER

  
  @test
  subroutine test_mat_AAT_INNER
    implicit none
    integer, parameter :: NR = 3
    integer, parameter :: NC = 10

    real(dp), allocatable :: A(:,:), AT(:,:), C1(:,:), C2(:,:)
    real(dp) :: x
    integer :: r,c

    allocate( A(NR,NC) )
    allocate( AT(NC,NR) )
    allocate( C1(NR,NR) )
    allocate( C2(NR,NR) )

    do r=1,NR
       do c=1,NC
          x = fill_B(r,c)
          A(r,c)  = x
          AT(c,r) = x
       end do
    end do

    call dot( C1, A, AT )
    call AAT( C2, A )

    @assertEqual( C1, C2, 1.0d-15 )

    deallocate( A )
    deallocate( AT )
    deallocate( C1 )
    deallocate( C2 )

  end subroutine test_mat_AAT_INNER

  
  @test
  subroutine test_mat_AAT_OUTER
    implicit none
    integer, parameter :: NR = 30
    integer, parameter :: NC = 10

    real(dp), allocatable :: A(:,:), AT(:,:), C1(:,:), C2(:,:)
    real(dp) :: x
    integer :: r,c

    allocate( A(NR,NC) )
    allocate( AT(NC,NR) )
    allocate( C1(NR,NR) )
    allocate( C2(NR,NR) )

    do r=1,NR
       do c=1,NC
          x = fill_B(r,c)
          A(r,c)  = x
          AT(c,r) = x
       end do
    end do

    call dot( C1, A, AT )
    call AAT( C2, A )

    @assertEqual( C1, C2, 1.0d-15 )

    deallocate( A )
    deallocate( AT )
    deallocate( C1 )
    deallocate( C2 )

  end subroutine test_mat_AAT_OUTER

  
end module test_mat
