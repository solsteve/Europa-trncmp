module testCopy_R8
  use pfunit_mod
  use trncmp_env
  implicit none


  integer, parameter :: dim1 = 11
  integer, parameter :: dim2 = 7
  integer, parameter :: dim3 = 5
  integer, parameter :: dim4 = 3


contains


  !=========================================================
  ! Copy Real 64 bit 1D
  !---------------------------------------------------------
  @test
  subroutine test_copy_R8_1d
    integer :: i
    real(dp)                  :: idx
    real(dp), dimension(dim1) :: ibuff
    real(dp), dimension(dim1) :: obuff

    idx = 0

    do i=1,dim1
       idx = idx + 1.1_dp
       ibuff(i) = idx
    end do

    call copy( obuff, ibuff )

    do i=1,dim1
       @assertFalse( obuff(i).lt.ibuff(i) )
       @assertFalse( obuff(i).gt.ibuff(i) )
    end do

  end subroutine test_copy_R8_1d


  !=========================================================
  ! Copy Real 64 bit 2D
  !---------------------------------------------------------
  @test
  subroutine test_copy_R8_2d
    integer :: i, j
    real(dp)                       :: idx
    real(dp), dimension(dim1,dim2) :: ibuff
    real(dp), dimension(dim1,dim2) :: obuff

    idx = 0

    do i=1,dim1
       do j=1,dim2
          idx = idx + 1.1_dp
          ibuff(i,j) = idx
       end do
    end do

    call copy( obuff, ibuff )

    do i=1,dim1
       do j=1,dim2
          @assertFalse( obuff(i,j).lt.ibuff(i,j) )
          @assertFalse( obuff(i,j).gt.ibuff(i,j) )
       end do
    end do

  end subroutine test_copy_R8_2d


  !=========================================================
  ! Copy Real 64 bit 3D
  !---------------------------------------------------------
  @test
  subroutine test_copy_R8_3d
    integer :: i, j, k
    real(dp)                            :: idx
    real(dp), dimension(dim1,dim2,dim3) :: ibuff
    real(dp), dimension(dim1,dim2,dim3) :: obuff

    idx = 0

    do i=1,dim1
       do j=1,dim2
          do k=1,dim3
             idx = idx + 1.1_dp
             ibuff(i,j,k) = idx
          end do
       end do
    end do

    call copy( obuff, ibuff )

    do i=1,dim1
       do j=1,dim2
          do k=1,dim3
             @assertFalse( obuff(i,j,k).lt.ibuff(i,j,k) )
             @assertFalse( obuff(i,j,k).gt.ibuff(i,j,k) )
          end do
       end do
    end do

  end subroutine test_copy_R8_3d


  !=========================================================
  ! Copy Real 64 bit 4D
  !---------------------------------------------------------
  @test
  subroutine test_copy_R8_4d
    integer :: i, j, k, l
    real(dp)                                 :: idx
    real(dp), dimension(dim1,dim2,dim3,dim4) :: ibuff
    real(dp), dimension(dim1,dim2,dim3,dim4) :: obuff

    idx = 0

    do i=1,dim1
       do j=1,dim2
          do k=1,dim3
             do l=1,dim4
                idx = idx + 1.1_dp
                ibuff(i,j,k,l) = idx
             end do
          end do
       end do
    end do

    call copy( obuff, ibuff )

    do i=1,dim1
       do j=1,dim2
          do k=1,dim3
             do l=1,dim4
                @assertFalse( obuff(i,j,k,l).lt.ibuff(i,j,k,l) )
                @assertFalse( obuff(i,j,k,l).gt.ibuff(i,j,k,l) )
             end do
          end do
       end do
    end do

  end subroutine test_copy_R8_4d


end module testCopy_R8
