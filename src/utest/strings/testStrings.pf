module testStrings


contains

  !! ------------------------------------------------------------------
  @test
  subroutine test_findany
    use pfunit_mod
    use string_tools
    implicit none

    character(:), allocatable :: test1

    integer :: i

    test1 = 'heather'

    i = find_any( test1, 'ea' )

    @assertEqual( 2, i )

    i = find_any( test1, 'ea', i+1 )

    @assertEqual( 3, i )

    i = find_any( test1, 'ea', i+1 )

    @assertEqual( 6, i )

  end subroutine test_findany
  
  !! ------------------------------------------------------------------
  @test
  subroutine test_findin
    use pfunit_mod
    use string_tools
    implicit none

    character(:), allocatable :: test1

    integer :: i

    test1 = 'heather'

    i = find_in( test1, 'e' )

    @assertEqual( 2, i )

    i = find_in( test1, 'a', i+1 )

    @assertEqual( 3, i )

    i = find_in( test1, 'h', i+1 )

    @assertEqual( 5, i )

  end subroutine test_findin
  
  !! ------------------------------------------------------------------
  @test
  subroutine test_count
    use pfunit_mod
    use string_tools
    implicit none

    character(:), allocatable :: test1

    integer :: i

    test1 = 'heather'

    i = count_char( test1, 'e' )

    @assertEqual( 2, i )

  end subroutine test_count
  
  !! ------------------------------------------------------------------
  @test
  subroutine test_case
    use trncmp_env
    use pfunit_mod
    use string_tools
    implicit none

    character(:), allocatable :: test1
    character(:), allocatable :: test2
    character(:), allocatable :: test3

    integer :: i

    test1 = 'HeAtHeR'
    test2 = toUpper( test1 )
    test3 = toLower( test1 )

    @assertTrue( leq( 'HEATHER', test2 ) )
    @assertEqual( 'heather', test3 )

  end subroutine test_case

  !! ------------------------------------------------------------------
  @test
  subroutine test_contain
    use pfunit_mod
    use string_tools
    implicit none

    character(:), allocatable :: test1
    character(:), allocatable :: test2
    character(:), allocatable :: test3
    character(:), allocatable :: result

    test1 = 'abc ( Heather } def'
    test2 = 'abc [ Anthea ) def'
    test3 = 'abc { Cassiopeia ] def'

    result = containedBy( test1, '({[', ')}]' )

  end subroutine test_contain


  !! ------------------------------------------------------------------
  @test
  subroutine test_compare
    use pfunit_mod
    use string_tools
    implicit none

    @assertTrue( 0 .lt. strcmp( 'aaaa', 'aaa' ) )
    @assertTrue( 0 .gt. strcmp( 'aaa', 'aaaa' ) )

    @assertTrue( 0 .gt. strcmp( 'aaa', 'aba' ) )
    @assertTrue( 0 .eq. strcmp( 'aaa', 'aaa' ) )
    @assertTrue( 0 .lt. strcmp( 'aba', 'aaa' ) )

  end subroutine test_compare

  !! ------------------------------------------------------------------
  @test
  subroutine test_split
    use pfunit_mod
    use string_tools
    implicit none
    integer :: n
    type(string_splitter) :: SP

    call split( SP, '  heather ,  anthea, cassiopeia ', ',' )

    n = SP%count()

    @assertEqual( 3, n )
    @assertEqual( 'heather',    SP%get(1) )
    @assertEqual( 'anthea',     SP%get(2) )
    @assertEqual( 'cassiopeia', SP%get(3) )


    call split( SP, '  heather1, stephen1 ', ',' )
    @assertEqual( 2, SP%count() )
    @assertEqual( 'heather1', SP%get(1) )

    
    call split( SP, '  heather2 stephen2 ', ',' )
    @assertEqual( 1, SP%count() )
    @assertEqual( 'heather2 stephen2', SP%get(1) )


  end subroutine test_split

  !! ------------------------------------------------------------------
  @test
  subroutine test_integer
    use pfunit_mod
    use string_tools
    implicit none

    character(:), allocatable :: test1
    integer, allocatable, dimension(:) :: list
    integer :: a(4)
    character(len=:), allocatable :: str

    a(1) = 1
    a(2) = 3
    a(3) = 5
    a(4) = 7

    @assertEqual( 3, asInteger( '3' ) )

    test1 = toString( 17 )
    @assertEqual( '17', test1 )

    list = asIntegerList( '[ 12, 34, 93 ]' )

    @assertEqual( 12, list(1) )
    @assertEqual( 34, list(2) )
    @assertEqual( 93, list(3) )

    str = toString( a )

    @assertEqual( '[1,3,5,7]', str )

  end subroutine test_integer


  !! ------------------------------------------------------------------
  @test
  subroutine test_single
    use trncmp_env
    use pfunit_mod
    use string_tools
    implicit none

    character(:), allocatable :: test1
    real(sp), allocatable, dimension(:) :: list
    real(sp) :: a(4)
    character(len=:), allocatable :: str

    a(1) = 1.3_sp
    a(2) = 3.4_sp
    a(3) = 5.7_sp
    a(4) = 7.9_sp

    @assertTrue( isEqual( 3.7_sp,  asReal4( '3.7' ) ) )
    @assertTrue( isEqual( 1.53e-7, asReal4( ' 1.53e-07  ' ) ) )

    test1 = toString( 1.9e-2, fmt='F5.3' )
    @assertEqual( '0.019', test1 )

    list = asReal4List( '[ 1.2, 3.4, 9.3 ]' )

    @assertTrue( isEqual( 1.2_sp, list(1) ) )
    @assertTrue( isEqual( 3.4_sp, list(2) ) )
    @assertTrue( isEqual( 9.3_sp, list(3) ) )

    str = toString( a, 'F5.2' )

    @assertEqual( '[ 1.30, 3.40, 5.70, 7.90]', str )

  end subroutine test_single


  !! ------------------------------------------------------------------
  @test
  subroutine test_double
    use trncmp_env
    use pfunit_mod
    use string_tools
    implicit none

    character(:), allocatable :: test1
    real(dp), allocatable, dimension(:) :: list
    real(dp) :: a(4)
    character(len=:), allocatable :: str

    a(1) = 1.3_dp
    a(2) = 3.4_dp
    a(3) = 5.7_dp
    a(4) = 7.9_dp

    @assertTrue( isEqual( 3.7_dp,  asReal8( '3.7' ) ) )
    @assertTrue( isEqual( 1.53d-7, asReal8( ' 1.53e-07  ' ) ) )

    test1 = toString( 1.9d-2, fmt='F5.3' )
    @assertEqual( '0.019', test1 )

    list = asReal8List( '[ 1.2, 3.4, 9.3 ]' )

    @assertTrue( isEqual( 1.2_dp, list(1) ) )
    @assertTrue( isEqual( 3.4_dp, list(2) ) )
    @assertTrue( isEqual( 9.3_dp, list(3) ) )

    str = toString( a, 'ES10.3' )

    @assertEqual( '[ 1.300E+00, 3.400E+00, 5.700E+00, 7.900E+00]', str )

  end subroutine test_double


end module testStrings
